import { prisma } from "@/lib/prisma";
import { getTaskSchema } from "@/lib/validation";
import { getSession } from "@/actions/authAction";
import { revalidatePath } from "next/cache";
import { z } from "zod";

// ğŸ”¹ Ã‰tape 1 : Valider les donnÃ©es avec Zod (safeParse)

// ğŸ”¹ Ã‰tape 2 : VÃ©rifier si la validation a Ã©chouÃ© et retourner une erreur si nÃ©cessaire

// ğŸ”¹ Ã‰tape 3 : RÃ©cupÃ©rer la session utilisateur

// ğŸ”¹ Ã‰tape 4 : VÃ©rifier si l'utilisateur est connectÃ© et retourner une erreur si nÃ©cessaire

// ğŸ”¹ Ã‰tape 5 : RÃ©cupÃ©rer les tÃ¢ches depuis la base de donnÃ©es avec Prisma

// ğŸ”¹ Ã‰tape 6 : VÃ©rifier si aucune tÃ¢che n'a Ã©tÃ© trouvÃ©e et retourner un message appropriÃ©

// ğŸ”¹ Ã‰tape 7 : RafraÃ®chir les donnÃ©es avec revalidatePath (si nÃ©cessaire)

// ğŸ”¹ Ã‰tape 8 : Retourner les tÃ¢ches rÃ©cupÃ©rÃ©es avec succÃ¨s

// ğŸ”¹ Ã‰tape 9 : GÃ©rer les erreurs Zod (validation des donnÃ©es)

// ğŸ”¹ Ã‰tape 10 : GÃ©rer les erreurs serveur et retourner un message d'erreur gÃ©nÃ©rique

export async function getTasks(data: unknown) {
  try {
    const validateData = getTaskSchema.safeParse(data);
    if (!validateData.success) {
      return {
        success: false,
        message: "DonnÃ©es invalides.",
        errors: validateData.error.flatten().fieldErrors,
      };
    }
    const session = await getSession();

    if (!session?.user?.id) {
      return {
        success: false,
        message: "Vous devez Ãªtre connectÃ© pour voir vos tÃ¢ches.",
      };
    }
    const tasks = await prisma.task.findMany({
      where: {
        userId: session.user.id,
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    revalidatePath("/");

    if (tasks.length === 0) {
      return { success: false, message: "Aucune tÃ¢che trouvÃ©e." };
    }

    return { success: true, tasks };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return { success: false, message: error.errors[0].message };
    }
    console.error("Erreur serveur :", error);
    return { success: false, message: "Erreur interne du serveur." };
  }
}
// Sans zod
// ğŸ”¹ Ã‰tape 1 : RÃ©cupÃ©rer la session utilisateur
// const session = await getSession();

// ğŸ”¹ Ã‰tape 2 : VÃ©rifier si l'utilisateur est connectÃ© et retourner une erreur si nÃ©cessaire
// if (!session || !session.user || !session.user.id) {
//     return { success: false, message: "Vous devez Ãªtre connectÃ© pour voir vos tÃ¢ches." };
// }

// ğŸ”¹ Ã‰tape 3 : VÃ©rifier que `data` est bien dÃ©fini et contient les bonnes propriÃ©tÃ©s (validation manuelle)
// if (!data || typeof data !== "object") {
//     return { success: false, message: "DonnÃ©es invalides." };
// }

// ğŸ”¹ Ã‰tape 4 : VÃ©rifier si certaines propriÃ©tÃ©s spÃ©cifiques sont nÃ©cessaires et valides
// if (data.status && typeof data.status !== "string") {
//     return { success: false, message: "Le statut doit Ãªtre une chaÃ®ne de caractÃ¨res." };
// }

// ğŸ”¹ Ã‰tape 5 : RÃ©cupÃ©rer les tÃ¢ches depuis la base de donnÃ©es avec Prisma en utilisant `data` si applicable
// const tasks = await prisma.task.findMany({
//     where: {
//         userId: session.user.id,
//         ...(data.status ? { status: data.status } : {}) // Appliquer un filtre si `status` est fourni
//     },
//     orderBy: { createdAt: "desc" },
// });

// ğŸ”¹ Ã‰tape 6 : VÃ©rifier si aucune tÃ¢che n'a Ã©tÃ© trouvÃ©e et retourner un message appropriÃ©
// if (tasks.length === 0) {
//     return { success: false, message: "Aucune tÃ¢che trouvÃ©e." };
// }

// ğŸ”¹ Ã‰tape 7 : RafraÃ®chir les donnÃ©es avec `revalidatePath` (si nÃ©cessaire)
// revalidatePath("/");

// ğŸ”¹ Ã‰tape 8 : Retourner les tÃ¢ches rÃ©cupÃ©rÃ©es avec succÃ¨s
// return { success: true, tasks };

// ğŸ”¹ Ã‰tape 9 : GÃ©rer les erreurs serveur avec `try/catch` et retourner un message d'erreur gÃ©nÃ©rique
// try { } catch (error) {
//     console.error("Erreur serveur :", error);
//     return { success: false, message: "Erreur interne du serveur." };
// }
